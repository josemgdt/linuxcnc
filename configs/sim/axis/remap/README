Configuraciones de muestra para códigos remapeados.

getting-started: introducción la definición de nuevos códigos en procedimientos NGC y Python

extend-builtins: demuestra remapeo de códigos internos T, M6, M61, S, F. Esto
podría ser un punto de partida para su propia configuración. También muestra cómo referirse al comportamiento interno de los códigos.

manual-toolchange-with-tool-length-switch: M6 extendido para que haga una prueba de longitud de herramienta después del cambio.

rack-toolchange: intenta imitar el parche racktoolchanger sin tal parche, sino con remapeo de códigos. 

cycle: demostración de cómo se pueden crear nuevos códigos de ciclo con subrutinas O-word o Python

iocontrol-removed: una 'investigación' de la rama de reasignación (ahora fusionada): Demuestra la eliminación de iocontrol por completo y su reemplazo por un complemento de Python en task. Aparte de eso, se usa el ejemplo rack-toolchanger. Además, usa experimentalmente sqlite3 para almacenamiento de herramientas.

>>>>>>>>>>> No sugerido para uso en producción. <<<<<<<<<<<<<<<<<<<<<<<<<<<<

python-stdglue contiene código Python embebido  que admite los ejemplos anteriores. Esto debería eventualmente evolucionar hacia un código enlatado que los usuarios no necesitan tocar excepto en circunstancias más exóticas. Tenga en cuenta que todos los ejemplos anteriores utilizan el mismo código de unión de remap.py.

common_nc_subs: contiene reset_state.ngc, que debe llamarse desde el procedimiento ON_ABORT. Tenga en cuenta que es especialmente importante restablecer el estado modal después de un procedimiento de remapeo fallido porque esto puede dar lugar a fallos continuos (por ejemplo, error ID 3437928). Las demostraciones usan su propio sub_abort sub y llaman a reset_state.

Documentación de Remapping:
  http://linuxcnc.org/docs/devel/html/remap/remap.html

Ver también:
  http://wiki.linuxcnc.org/cgi-bin/emcinfo.pl?RemappingStatus
