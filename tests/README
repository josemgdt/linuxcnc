│La suite de tests HAL
---------------------
Los tests en estos directorios sirven para probar el comportamiento de los componentes HAL.

Cada subdirectorio de este directorio puede contener un elemento de prueba. El script runtests recorre recursivamente
la estructura del directorio, por lo que los múltiples tests se estructuran como
	tests/
		xyz.0
		xyz.1
		xyz.2
o
	tests/
		xyz/
			0	
			1	
			2	

Se admiten dos tipos de tests: tests de regresión, en las que la salida es
probada contra una salida "bien conocida", y tests funcionales, en las que
la salida alimenta a un programa que puede determinar si es correcta o no

Corriendo las pruebas
---------------------
Actualmente, las pruebas solo funcionan con la configuración "run in place".
Se puede ejecutar corriendo (desde el directorio emc2 superior):
	scripts/runtests tests
También se puede ejecutar un subconjunto de tests:
	scripts/runtests tests/xyz tests/a*
Los directorios nombrados en la línea de comandos buscan de forma recursiva
los archivos 'test.hal' o 'test.sh', y un directorio con dicho archivo
se supone que contiene un test de regresión o un test funcional.

Las pruebas pueden contener archivos distintos a los especificados a continuación. Por ejemplo, cuando se usan 
datos 'streamer' como entrada de test, generalmente estarán presentes un script de shell con "halstreamer<<EOF"
y un "here document". (vea and-or-not-mux.0/runstreamer como un ejemplo)

Pruebas de regresión
--------------------
Una prueba de regresión debe consistir en estos tres archivos:
	README
		Un archivo legible por humanos que describe el test.
	test.hal *o* test.sh *o* test
		El script de test a ejecutar. test.hal se ejecuta con
		'halrun -f', test.sh se ejecuta con 'bash -x', y
		test se ejecuta como ./test
	expected
		Un archivo cuyos contenidos se comparan con la salida stdout de
		halrun -f test.hal

Un test de regresión típico cargará varios componentes, incluyendo generalmente a
'threads' y 'sampler', y con frecuencia a 'streamer'; luego recolecta muestras
durante algún número de llamadas al hilo en tiempo real. Luego sale.

Los archivos "test.hal" de los test de regresión casi siempre incluirán la línea
	setexact_for_test_suite_only
que hace que HAL actúe como si el período base_periodo solicitado estuviera disponible. De lo contrario, 
los resultados diferirán ligeramente dependiendo del período base real y los test de regresión fallarian.

El test pasa si la salida esperada y real son idénticas. De lo contrario, ha fallado.

Pruebas funcionales
-------------------
Una prueba funcional debe constar de tres archivos:
	README
		Un archivo legible por humanos que describe el test.
	test.hal *o* test.sh *o* test
		El script de test a ejecutar. test.hal se ejecuta con
		'halrun -f', test.sh se ejecuta con 'bash -x', y
		test se ejecuta como ./test
	checkresult
		Un archivo ejecutable (como un script shell o de python)
		que determina si la salida stdout de halrun -f test.hal
		indica éxito o fracaso.

Los archivos "test.hal" de los test a menudo incluirán la línea
	setexact_for_test_suite_only
que hace que HAL actúe como si el período base_periodo solicitado estuviera disponible. De lo contrario, los
resultados diferirán ligeramente dependiendo del período base real,lo que podría afectar a si 'checkresult'
da un resultado preciso.

Un test típico cargará varios componentes, incluyendo generalmente a 'threads' y 'sampler', y con frecuencia 
a 'streamer'; luego recolecta muestras durante algún número de llamadas al hilo en tiempo real. Luego sale. 'checkresult' 
mirará la salida y verá si indica éxito.

El test pasa si el comando "checkresult actual" devuelve un valor shell de éxito (código de salida 0).
De lo contrario, el test ha fallado.
