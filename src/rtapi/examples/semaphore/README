Este es un ejemplo de semáforos RTAPI entre dos procesos en tiempo real.

NOTA: Los conceptos básicos de este ejemplo no han cambiado desde que se 
escribió originalmente, pero algunos detalles si han cambiado.
Vea las notas a continuación.

El proceso maestro (master.c) crea un semáforo, 'master_sem', y ejecuta una tarea de temporizador periodica
cada milisegundo que da el semáforo y acumula un conteo local de la cantidad de veces que se le ha dado.
NOTA: Cambiado a cada 1 segundo para que las escrituras en el registro de mensajes del kernel sean legibles.

El proceso esclavo (slave.c) crea una tarea que bloquea el semáforo global 'master_sem' y acumula un conteo local
de la cantidad de veces que se ha tomado.
NOTA: El semáforo ya no es global; en cambio, el maestro y el esclavo lo comparten
abriéndolo con la misma clave.

La tarea esclava no se adjunta a un temporizador, se logra al pasar un 0 al argumento 'period_nsec' de rtapi_task_start()
y luego ejecutar su primera aparición manualmente llamando a rtapi_task_resume().
NOTA: El esclavo todavía no está conectado a un temporizador. 
Esto se refiere como "free-running". Sin embargo, la API task_new y
task_start han cambiado; ya no se llama a task_start para una tarea 
free-runing. En su lugar, solo se llama a task_resume.

Como el proceso esclavo hace referencia a una variable global, 'master_sem',
declarada en common.h y definida en master.c, master.o debe cargarse antes
de que aparezca slave.o o resultara un símbolo indefinido.
NOTA: Esto ya no es cierto. Dado que ambos módulos abren el semáforo con una
clave, se pueden cargar en cualquier orden. El semáforo no es global, y lo
único en común es la directiva #define para la clave.

Los recuentos acumulativos se imprimen en la consola cuando se eliminan
las tareas. Deben ser casi iguales, diferenciándose solo por el número
de veces que la tarea maestra dio el semáforo antes de que se iniciara la tarea esclava.
