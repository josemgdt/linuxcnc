README para RTAPI

RTAPI es una API que envuelve a RTLinux y RTAI y que permite que los programas en
tiempo real se utilicen sin cambios de código.

Archivos:

Makefile		: el Makefile
README		: este archivo
rtapi.h		: declaraciones para las funciones genéricas de RTAPI.
rtapi_app.h		: declaraciones para los módulos del kernel
rtapi_common.h	: Colección de typedefs, etc., utilizada internamente por RTAPI.
procfs_macros.h	: Macros utilizadas para implementar la interfaz /proc
rtapi_proc.h	: más cosas que implementan la interfaz /proc
rtai_rtapi.c	: implementación de API en tiempo real, para RTAI
rtai_ulapi.c	: implementación de la API de nivel de usuario, para RTAI
uspace_rtapi.c	: implementación de API en tiempo real, para RTOS POSIX 
uspace_ulapi.c	: implementación de API de nivel de usuario, para RTOS POSIX 


../../Makefile.inc: contiene banderas de tiempo de compilación, etc.
../../configure: script que crea Makefile.inc

El proceso de construcción
--------------------------
El proceso de construcción sigue la convención estándar de Linux:

./configure
make

El script de configuración y make están diseñados para ejecutarse desde la
raíz del árbol emc2, para construir todo el proyecto emc2. Ver el
README en ese directorio para más detalles.

Para ejecutar los ejemplos:

1. Abra una ventana de shell y comience a ver el registro log del kernel:

tail -f /var/log/messages

deje esto en marcha y vuelva a su ventana de shell original;
debería estar en el directorio emc2

2. Cargue los módulos RTOS y RTAPI:

Nota: para esto y la mayoría de los siguientes pasos que necesitará
ser root, o use 'su -c "<comando>"'

scripts/load_rtapi

Vera una serie de mensajes emergentes en el registro del kernel conforme los componentes del RTOS están instalandose ...
Una de las últimas será:

<date> <time> <host> kernel: RTAPI: Init complete

Esto significa que el módulo rtapi (rtai_rtapi.o) está cargado.

3. Ejecute el ejemplo del temporizador de tarea:

/sbin/insmod rtlib/timertask.o

Aparecerán algunos mensajes en el registro del kernel conforme la tarea
se crea y se inicia:

<date> <time> <host> kernel: timertask init: desired clock 10000000, actual 10000168
<date> <time> <host> kernel: timertask init: started timer task
<date> <time> <host> kernel: timertask init: max delay = 2500042

Espera unos segundos, luego quite el módulo:

/sbin/rmmod timertask

Un par de mensajes más de timertask:

<fecha> <hora> <host> kernel: kernel: timertask exit: timer count is 8174

Esto significa que se hicieron 8174 llamadas a la tarea. (Se dejo correr durante unos 8 segundos)

4. Ejecute el ejemplo de interrupción de puerto paralelo:

/sbin/insmod rtlib/extint.o

Cortocircuite el pin 10 con el pin 25 en el puerto paralelo un par de veces para
generar algunas interrupciones, luego vea el recuento en el registro del kernel:

/sbin/rmmod extint

De nuevo, obtendrá mensajes del módulo extint:

<date> <time> <host> kernel: extint: interrupt count is 2522

Esto significa que se produjeron 2,522 interrupciones, muchas para un solo cortocircuito del pin 10 debido
al ruido de contacto.

5. Ejecute el ejemplo de memoria compartida:

/sbin/insmod rtlib/shmemtask.o

bin/shmemusr

Vea el aumento de los latidos de la memoria compartida.
Utilice crtl-C para salir de shmemusr.
A continuación, elimine la tarea en tiempo real

/sbin/rmmod shmemtask

6. Ejecutar el ejemplo de semáforo:

/sbin/insmod rtlib/master.o

La tarea master comenzará a dar el semáforo una vez por
segundo, imprimiendo en el registro cuando lo hace.

/sbin/insmod rtlib/slave.o

El esclavo intenta obtener el semáforo e imprime cada vez
que tiene éxito. Dado que el maestro ya ha dado el
semáforo varias veces, y es un semáforo contando,
el esclavo correrá varias veces seguidas. Una vez que atrapa
al maestro, se ejecutará justo después de que se ejecute el maestro.
Detener las tareas en orden inverso:

/sbin/rmmod slave
/sbin/rmmod master

7. Ejecutar el ejemplo FIFO:

/sbin/insmod rtlib/fifotask.o

fifotask en tiempo real comenzará a escribir cadenas a la
fifo una vez por segundo, y haciendo eco de las cadenas en el archivo de log.

bin/fifousr

El programa de modo de usuario leerá cadenas del fifo y
los imprimira.

Use ctrl-c para salir de fifousr y detener la tarea:

/sbin/rmmod fifotask


8. Pruebas más elaboradas:

En teoría, debería poder ejecutar cualquiera o todas las
pruebas anteriores al mismo tiempo, haciendo insmod's y rmmod's
en cualquier orden.

9. Apagado.

Para eliminar rtapi y el resto de los módulos RTOS:

scripts/unload_rtapi

Si alguna tarea se está ejecutando, el script debería imprimir
los nombres de los módulos y se niega a continuar. Apagar los
módulos (rmmod) y volver a intentarlo.

La interfaz /proc/rtapi
-------------------------

Varios archivos en /proc/rtapi proporcionan información sobre el estado interno
de la RTAPI. Estos son, en orden:

  debug:	Muestra qué tipos de mensajes se imprimirán en /var/log/messages.
            Esto se puede alterar escribiendo un dígito a debug. Ver rtapi.h
            para los valores relevantes.

  fifos: 	Enumera los fifo actualmente en uso, y según qué ID de proceso.

  modules:  Muestra los nombres de los módulos cargados, los ID y el tipo
            (en tiempo real o espacio de usuario).

  sems:     Enumera los semáforos actualmente en uso.

  shmem:    Muestra la memoria compartida asignada y el tamaño.

  status:   Da información sobre la cantidad de tareas y estado del temporizador.

  tasks:    Lista de tareas ID, prioridad, etc.

Para ver rápidamente el estado de rtapi, haga "cat /proc/rtapi/*"

El proceso de desinstalación
---------------------

make clean

Diseño de código
-----------

El código se divide entre los directorios src/ y example/, cada uno con su
propio Makefile. También hay un Makefile de nivel superior y un Makefile.inc
que es incluido por cada uno de los src/Makefiles. El script de configuración
crea Makefile.inc basado en algunas heurísticas que determinan si
tiene RTL o RTAI, y define las banderas del compilador en consecuencia.
El script de configuración es un script de shell (/bin/sh), que proporciona una gran flexibilidad en lo que se
puedehacer. 'config' actualmente verifica que existen instalaciones de Linux en tiempo real, usando 'find' y buscando
"rtl.mk" y ".buildvars" como signos indicativos. Si se encuentra,RTDIR se establece al directorio padre asociado.
Alternativamente, RTDIR se puede configurar a través de un argumento de línea de comando como se describe en
"El Proceso de Construcción". Esto nos da la flexibilidad de compilación cruzada en un sistema que no ejecuta
un kernel en tiempo real.

Si se encuentra una instalación, entonces los símbolos para el tipo RT Linux,
las banderas de compilación, etc. son incluidas en el archivo Makefile.inc. Si se especifica un directorio
invalido o no se encuentra el archivo marcador correcto, configure saldrá con un mensaje de "Uso".


Makefiles
---------
La forma general para una entrada de makefile es:

target : dependencies
	rules

donde <target> es lo que se quiere hacer, <dependencies> son las cosas
de las que depende target, y <rules> dice cómo construir el target desde las
dependencias. Las líneas se pueden continuar con el carácter \ barra invertida
al final de la línea que continuará. Cada línea de reglas debe comenzar con un carácter TAB. En general, una
entrada de makefile se parece más a esto:

target : dependency_1 dependency_2 \
	... \
	dependency_n
[TAB]	rule_1
[TAB]	long rule \
	rest of long rule
[TAB]	...
[TAB]	rule_n

Solo puede tener un target por entrada, pero tantas dependencias y
reglas como necesite. También puede tener múltiples entradas diferentes para
el mismo target; puede ver esto al final de los Makefiles con el
archivo de encabezado de dependencias generado por 'makedepend', después de la linea "DO NOT REMOVE THIS LINE".

Con el fin de minimizar el número de archivos, cada src/Makefile compila
directamente en los directorios lib/ o bin/. Por ello, los objetivos y las reglas no son tan simples como esto:

foo.o : foo.c
	gcc -c foo.c -o foo.o

sino que se ven así:

LIB_DIR = ../../lib

$(LIB_DIR)/foo.o : foo.c
	gcc -c foo.c -o $(LIB_DIR)/foo.o

Esto significa que el archivo .o resultante no se encuentra en el directorio actual, sino que se genera directamente
en el directorio ../../lib.

Las reglas actuales son un poco más complicadas ya que se usan las abreviaturas de variables de make. Estas son:

$@	para el target
$<	para la primera dependencia
$^	para todas las dependencias

El ejemplo anterior sería entonces

LIB_DIR = ../../lib

$(LIB_DIR)/foo.o : foo.c
	gcc -c $< -o $@


Notas de configuración
-------------------
chmod a+rw /dev/rtai_shm, para RTAI
chmod a+rw /dev/mem, para mbuff
