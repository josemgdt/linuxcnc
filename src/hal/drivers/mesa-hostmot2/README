
Este controlador admitirá el firmware HostMot2 en las siguientes tarjetas:

    EPP:
    
       7i43 (Xilinx Spartan 3, 200 K o 400 K puertas (consultar desde CPLD))


    PCI:

        5i20 (Xilinx Spartan 2, 200 K puertas, PLX 9030, subsistema ID 3131)
        5i22-1 (Xilinx Spartan 3, 1,0 M puertas, PLX 9054, subsistema ID 3314)
        5i22-1.5 (Xilinx Spartan 3, 1.5 M puertas, PLX 9054, subsistema ID 3313)
        5i23 (Xilinx Spartan 3, 400 K puertas, PLX 9054, subsistema ID 3315)


    PC/104-Plus:

        4i65 (Xilinx Spartan 2, 200 K puertas, PLX 9030, subsistema ID 3132)
        4i68 (Xilinx Spartan 3, 400 K puertas, PLX 9054, subsistema ID 3311 (era
              3133))



Watchdog:

    El tiempo de espera se establece mediante el parámetro watchdog.timeout_ns. Es un u32, lo que hace un tiempo máximo de
espera 4,294,967,295 ns, o alrededor de 4.3 segundos.




Pines, IOPorts, y GPIOs:

Los pines son las pequeñas piezas de metal en los conectores que llevan las
señales. Los pines están descritos por la matriz de descriptores de pines en el
firmware. Cada pin tiene un Descriptor de Pin (PD). Cada pin esta conectado
a una o dos instancias de módulo: una instancia de IOPort y (opcionalmente)
a alguna otra instancia de algún otro módulo. IOPort es considerado el
usuario "primario" del pin y la otra instancia del módulo (si existe)
es considerado el usuario secundario. El PD especifica qué módulo
(si existe) es el usuario secundario de este pin, qué instancia de ese
módulo, cuál de los pines de la instancia del módulo es, y si la
instancia del módulo utiliza el pin como una entrada o una salida. (Ver mapa de registros de hostmot2 para los detalles).
La instancia de IOPort que es el usuario principal tiene un registro que selecciona si el pin es
conducido por el usuario primario o secundario. Esta configuración es elegida
por el usuario en el momento de carga del módulo, especificando la cadena de configuración.

Los IOPort son instancias del módulo IOPort. Cada instancia de IOPort
gobierna los pines en un conector de E/S (24 pines por conector).

Los GPIO son las representaciones HAL de pines. No todos los pines tendrán una
GPIO correspondiente, y no todos los GPIO se ven iguales. Por ejemplo,
los pines que son gobernados por una instancia de módulo pueden ser configurados (por esa instancia del módulo) como
entrada o salida, y esa configuración
no es modificable por el usuario y no se exporta a HAL.




Arquitectura:

Cargar el módulo hostmot2 no hace nada más que exportar un par de funciones al kernel para usar los controladores de bajo
nivel 


Cargar los controladores de bajo nivel para los tipos de placa que desea usar
(hm2_7i43 y/o hm2_pci), dando a cada uno una cadena de configuración modparam


La configuración del controlador de la tarjeta hace esto:

encontrar la(s) tarjeta(s)

Para cada tarjeta encontrada:

	inicializa un hm2_lowlevel_io_t (llio)

	pasar la cadena de configuración del llio y de la placa a la
	función hm2_register() (en el controlador hostmot2), que hace:

		asignar una estructura hostmot2_t para mantener esta instancia en ejecución del firmare hostmot2, agregar
        hm2_lowlevel_io_t a él

		analizar la cadena de configuración

		busca el firmware especificado, llama al llio para programar la fpga

		llamar a llio para leer el encabezado de IDROM, descriptores de Pin,
		y descriptores de módulo en hm2_t

		analizar y validar el encabezado idrom

		analizar los MD: leer la lista de MD, llamar
		a los controladores del módulo para validar cada uno (saltar 
		MDs desconocidos, y fallar la carga si se encuentran algun MD inválidos).
		Cada controlador de módulo hace esto:

			verifica que MD sea consistente (es decir, todos los campos de MD coinciden con valores esperados)

			verificar que este sea el primer MD de este GTAG (tipo) visto (es decir, solo puede haber un MD encoder,
            un MD pwmgen MD, etc)

			Hacer cualquier comprobación específica del módulo

			Inicializar la estructura del módulo en hm2.

			registrar las regiones tram lectura/escritura

			asignar e inicializar todos los buffers de registro no-tram y
			cualquier memoria extra que necesite el controlador del módulo

			exportar objetos HAL, inicializar los valores de pin y param
			(FIXME: ioport no puede hacerlo aquí)

			devolver el número de instancias de módulo realmente utilizadas

		Asignar buffers tram (basados en registro módulos-controladores
		desde el paso anterior)

		Configurar los pines que son propiedad de las instancias del módulo
		activo (fuente y dirección)

		exportar e inicializar objetos gpio HAL (hm2->pin)

		configurar la interfaz sin formato, si está habilitada (exportar e
		inicializar objetos HAL sin procesar)

		hm2_force_write (indica a todos los controladores de módulo que escriban su representación interna al hardware;
        esto configura completamente las partes no-tram del hardware)

		leer tram, decirle a cada driver de módulo que inicie su estructuras 
		lectura-tram, luego decir a cada uno que procese el (mismo) búfer 
		lectura-tram

		Decirle a cada controlador de módulo que inicie su estructuras
		escritura-tram, luego decirle a cada uno que prepare una escritura 
		tram, luego escribir tram

		exportar las funciones principales de lectura/escritura.

		si el llio dice ser seguro para subprocesos, exportar funciones gpio
		de lectura/escritura


FIXME: ok hasta aquí


Las funciones de lectura/escritura por HAL exportadas por placa son funciones hm2 genéricas que usan funciones de E/S
específicas de la placa (hm2_lowlevel_io_t). Cada función hm2 genérica se exporta a HAL una vez por cada instancia hm2 que
puede utilizarla. Cada función HAL es la misma función hm2 con diferentes hostmot2_t para los argumentos.


En tiempo de ejecución, eventualmente será conveniente utilizar TranslationRAM
para asignar todos los registros on-board para que sean consecutivos, y hacer una sola transferencia masiva para leer
todas las cosas en el controlador.


Agradecimientos:

Gracias a Peter Wallace en Mesa Electronics por apoyar el desarrollo de este driver.

Gracias a Jeff Epler por el código de índice de encoder inicial.

Gracias a John M Kasunich, Steven W Padnos y Paul Corner por su ayuda
con RTAI y LinuxCNC, y todo lo demás.

Gracias a Eric Johnson por muchas pruebas y depuración tempranas.

Gracias a Jeffry Molanus (U. Twente) por el controlador anyio, que proporcionó
un poco de inspiración inicial.


